package com.dream.freedom.create.builderpattern;

/**
 * 建造者模式介绍:
 *
 * 使用多个简单的对象创建一个复杂的对象，用于将一个复杂的构建与其表示分离，使得同样的构建过程可以创建不同的表示，然后通过一个Builder类创建最终对象。
 */
public class BuilderPatternDesc {

    /*
    *
        1、定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示

        2、主要作用：在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。

        3、如何使用：用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）

        4、解决的问题：
            （1）、方便用户创建复杂的对象（不需要知道实现过程）
            （2）、代码复用性 & 封装性（将对象构建过程和细节进行封装 & 复用）

        5、注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序，一般用来创建更为复杂的对象



    * */
}
