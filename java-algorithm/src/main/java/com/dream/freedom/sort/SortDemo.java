package com.dream.freedom.sort;

/**
 * 算法 —— 排序
 *
 */
public class SortDemo {


    /**
     *
     * 算法--排序--冒泡排序：
     *
     * 1、每一次循环结束之后，都会找出最大的数据，放到参与比较的这堆数据的最右边，(冒出最大的那个气泡)
     *
     * 2、核心：拿着左边的数据和右边的数据做对比，当左边 > 右边 的时候，交换位置
     *
     * 3、双循环次数 =  数组的长度-1 + (数组的长度-2) + (数组的长度-3) ....+ 1； 但是执行判断的次数不确定，因为经常交换，所以交换执行的次数会比较多一些
     *
     */


    /**
     * 算法--排序--选择排序：
     *
     *  1、选择排序，就是假设第一个是最小的，然后，用第一个和后面的做比较，如果后面发现更小的，然后用这个用更小的继续往后比较，知道比较完成
     *
     *  2、找到最下的那个之后，用这个最下的和第一位置交换，进入第二循环，从第二数据开始往后比较，找出最小的，然后和第二位位置换掉，，周而复始
     *
     *  3、双循环次数 =  数组的长度-1 + (数组的长度-2) + (数组的长度-3) ....+ 1； 因为不需要经常交换，只有确定了最小的才会和做比较的数据第一位交换，所以，交换的次数比较少
     *
     *
     */


}
